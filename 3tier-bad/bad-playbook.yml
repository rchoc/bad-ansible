---
# Bad ansible! This playbook is an example of poor/bad practices!
# Bad practices may include:
#
#   Poor formatting and structure
#   Poor use of YAML - but good enough to parse
#   Inconsistent style
#   Incorrect use of modules
#   Poor module choice
#   Unclear names
#   Hard coding / poor use of variables
#   Roles - what are roles?
#   Bare variables
#   No use of handlers

- name: Deploy configuration
  hosts: all
  gather_facts: true
  become: true

  tasks:
  - name: enable repos
    template:
      src: ./open_three-tier-app.repo
      dest: /etc/yum.repos.d/open_three-tier-app.repo
      mode: 0644

- name: deploy haproxy
  hosts: frontends
  gather_facts: true
  become: true

  tasks:
  - name: Install http
    package:
      name: httpd
      state: latest

  - name: install HAProxy
    yum:
      name=haproxy state=latest
  - name: enable HAProxy
    service:
      name: haproxy
      state: started
  - name: configure haproxy
    template:
      src: ./haproxy.cfg.j2
      dest: /etc/haproxy/haproxy.cfg
      notify: "restart haproxy services"
  
  - name: restart HAproxy
    service:
      name: haproxy
      state: restarted


  handlers:
  - name: restart haproxy
    service: 
      name:   haproxy
      state:  restarted
    listen: "restart haproxy services"




- name: deploy tomcat
  hosts: apps
  gather_facts: false
  become: true

  tasks:
  - name: install tomcat
    package:
      name: tomcat
      state: latest
  - name: enable tomcat at boot
    service:
      name: tomcat
      enabled: yes

  - name: create ansible tomcat directory
    file:
      path: /usr/share/tomcat/webapps/ROOT
      state: directory

  - name: copy static index.html to tomcat webapps/ansible/index.html
    template:
      src: index.html.j2
      dest: /usr/share/tomcat/webapps/ROOT/index.html
      mode: 0644

  - name: start tomcat
    service:
      name: tomcat
      state: started

- name: index.html on app 1
  hosts: app1
  gather_facts: true
  become: true


  tasks:
  - name: create conf directory
    file: path=/usr/share/tomcat/webapps/ansible state=directory
  - name: copy static index.html to tomcat webapps/ansible/index.html
    template:
      src: index.html.app1
      dest: /usr/share/tomcat/webapps/ansible/index.html

- name: index.html on app 2
  hosts: app2
  gather_facts: true
  become: true

  tasks:
  - name: create conf directory
    file: path=/usr/share/tomcat/webapps/ansible state=directory
  - name: copy static index.html to tomcat webapps/ansible/index.html
    template:
      src: index.html.app2
      dest: /usr/share/tomcat/webapps/ansible/index.html

- name: deploy postgres
  hosts: apps
  gather_facts: false
  become: true
  hosts: appdbs
  tasks:
  - name: install progresql server
    package:
      name: postgresql-server
      state: latest

  #- name: install postgres
  #  yum:
  #    name: postgresql-server
  #    state: latest
  - name: enable postgresql service at boot
    service:
      name: postgresql
      enabled: yes

  - name: Check if PostgreSQL database is initialized.
    stat:
      path: "/var/lib/pgsql/data/PG_VERSION"
    register: pgdata_dir_version

  - name: Ensure PostgreSQL database is initialized.
    command: "/usr/bin/initdb -D /var/lib/pgsql/data"
    when: not pgdata_dir_version.stat.exists
    become: yes
    become_user: "postgres"
    # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
    vars:
      ansible_ssh_pipelining: true



  - name: start postgres
    service:
      name: postgresql.service
      state: started

- name: deploy apache
  hosts: apps
  gather_facts: false
  become: true
  hosts: apps
  tasks:
  - name: install apache
    yum:
      name: httpd
      state: latest
  - name: enable apache at boot
    service:
      name: httpd
      enabled: yes
  - name: start apache
    service:
      name: httpd
      state: started
